// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	object "ebanx/challenge/domain/object"

	mock "github.com/stretchr/testify/mock"
)

// EventUsecase is an autogenerated mock type for the EventUsecase type
type EventUsecase struct {
	mock.Mock
}

// Deposit provides a mock function with given fields: _a0
func (_m *EventUsecase) Deposit(_a0 object.Transaction) (*object.DepositBalance, error) {
	ret := _m.Called(_a0)

	var r0 *object.DepositBalance
	if rf, ok := ret.Get(0).(func(object.Transaction) *object.DepositBalance); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*object.DepositBalance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(object.Transaction) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: _a0
func (_m *EventUsecase) Transfer(_a0 object.TransferTransaction) (*object.TransferBalance, error) {
	ret := _m.Called(_a0)

	var r0 *object.TransferBalance
	if rf, ok := ret.Get(0).(func(object.TransferTransaction) *object.TransferBalance); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*object.TransferBalance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(object.TransferTransaction) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Withdraw provides a mock function with given fields: _a0
func (_m *EventUsecase) Withdraw(_a0 object.Transaction) (*object.WithdrawBalance, error) {
	ret := _m.Called(_a0)

	var r0 *object.WithdrawBalance
	if rf, ok := ret.Get(0).(func(object.Transaction) *object.WithdrawBalance); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*object.WithdrawBalance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(object.Transaction) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
